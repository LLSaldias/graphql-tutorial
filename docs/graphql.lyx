#LyX 2.3 created this file. For more info see http://www.lyx.org/
\lyxformat 544
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass beamer
\begin_preamble
\usetheme{Warsaw}
%\usepackage{bera}% optional: just to have a nice mono-spaced font
\usepackage{listings}
\usepackage{xcolor}

\colorlet{punct}{red!60!black}
\definecolor{background}{HTML}{EEEEEE}
\definecolor{delim}{RGB}{20,105,176}
\colorlet{numb}{magenta!60!black}

\lstdefinelanguage{json}{
    basicstyle=\normalfont\ttfamily,
    numbers=left,
    numberstyle=\scriptsize,
    stepnumber=1,
    numbersep=8pt,
    showstringspaces=false,
    breaklines=true,
    frame=lines,
    backgroundcolor=\color{background},
    literate=
     *{0}{{{\color{numb}0}}}{1}
      {1}{{{\color{numb}1}}}{1}
      {2}{{{\color{numb}2}}}{1}
      {3}{{{\color{numb}3}}}{1}
      {4}{{{\color{numb}4}}}{1}
      {5}{{{\color{numb}5}}}{1}
      {6}{{{\color{numb}6}}}{1}
      {7}{{{\color{numb}7}}}{1}
      {8}{{{\color{numb}8}}}{1}
      {9}{{{\color{numb}9}}}{1}
      {:}{{{\color{punct}{:}}}}{1}
      {,}{{{\color{punct}{,}}}}{1}
      {\{}{{{\color{delim}{\{}}}}{1}
      {\}}{{{\color{delim}{\}}}}}{1}
      {[}{{{\color{delim}{[}}}}{1}
      {]}{{{\color{delim}{]}}}}{1},
}
\end_preamble
\use_default_options true
\maintain_unincluded_children false
\language spanish
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\use_microtype false
\use_dash_ligatures true
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry true
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\use_minted 0
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\is_math_indent 0
\math_numbering_side default
\quotes_style french
\dynamic_quotes 0
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
Introducción a GraphQL
\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
REST: Representational State Transfer 
\end_layout

\end_inset


\end_layout

\begin_layout Frame
REST es un estilo de arquitectura que define un conjunto de restricciones
 a usarse en la creación de Servicios Web.
\end_layout

\begin_deeper
\begin_layout Itemize
Permite la comunicación entre distintos sistemas.
\end_layout

\begin_layout Itemize
Usa estándares (HTTP, XML, JSON, etc.), lo que permitió que los desarrolladores
 lo adopten rápidamente.
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator plain
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
REST: Representational State Transfer 
\end_layout

\end_inset


\end_layout

\begin_layout Frame
En general, REST se usa sobre HTTP.
 Facilita la implementación de APIs, desacoplando el servidor y el cliente.
\end_layout

\begin_deeper
\begin_layout Itemize
Emplea los principales métodos HTTP: GET, POST, PUT, DELETE, PATCH.
\end_layout

\begin_layout Itemize
El intercambio de datos se suele realizar en formato JSON o XML.
\end_layout

\begin_layout Itemize
Se emplean los códigos HTTP estándar en la respuesta.
 Por ejemplo: 200 para una petición correcta, 404 es 
\begin_inset Quotes fld
\end_inset

Not Found
\begin_inset Quotes frd
\end_inset

.
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator plain
\end_inset


\end_layout

\begin_layout FragileFrame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
REST: Representational State Transfer
\end_layout

\end_inset


\end_layout

\begin_layout FragileFrame
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout FragileFrame
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout FragileFrame
GET 
\begin_inset space \quad{}
\end_inset

 /movies/
\end_layout

\begin_layout FragileFrame
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout FragileFrame
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{lstlisting}[language=json,numbers=none]
\end_layout

\begin_layout Plain Layout

{"movies": 
\end_layout

\begin_layout Plain Layout

   [{"name": "Titanic",
\end_layout

\begin_layout Plain Layout

     
\begin_inset Quotes fld
\end_inset

id
\begin_inset Quotes frd
\end_inset

: 217360881,
\end_layout

\begin_layout Plain Layout

     
\begin_inset Quotes fld
\end_inset

director
\begin_inset Quotes frd
\end_inset

: 
\begin_inset Quotes fld
\end_inset

James Cameron
\begin_inset Quotes frd
\end_inset


\end_layout

\begin_layout Plain Layout

     "cast": [{
\begin_inset Quotes fld
\end_inset

name
\begin_inset Quotes frd
\end_inset

: 
\begin_inset Quotes fld
\end_inset

Leonardo DiCaprio
\begin_inset Quotes frd
\end_inset

,
\end_layout

\begin_layout Plain Layout

               
\begin_inset Quotes fld
\end_inset

age
\begin_inset Quotes frd
\end_inset

: 45,
\end_layout

\begin_layout Plain Layout

               
\begin_inset Quotes fld
\end_inset

awards
\begin_inset Quotes frd
\end_inset

: [...]},
\end_layout

\begin_layout Plain Layout

              {
\begin_inset Quotes fld
\end_inset

name
\begin_inset Quotes frd
\end_inset

: 
\begin_inset Quotes fld
\end_inset

Kate Winslet
\begin_inset Quotes frd
\end_inset

,
\end_layout

\begin_layout Plain Layout

               
\begin_inset Quotes fld
\end_inset

age
\begin_inset Quotes frd
\end_inset

: 44,
\end_layout

\begin_layout Plain Layout

               
\begin_inset Quotes fld
\end_inset

awards
\begin_inset Quotes frd
\end_inset

: [...]}]},
\end_layout

\begin_layout Plain Layout

    {"name": "Kill Bill",
\end_layout

\begin_layout Plain Layout

     
\begin_inset Quotes fld
\end_inset

id
\begin_inset Quotes frd
\end_inset

: 184766018,
\end_layout

\begin_layout Plain Layout

      ...}
\end_layout

\begin_layout Plain Layout

   ]} 
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Separator plain
\end_inset


\end_layout

\begin_layout FragileFrame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
REST: Representational State Transfer
\end_layout

\end_inset


\end_layout

\begin_layout FragileFrame
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout FragileFrame
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout FragileFrame
GET 
\begin_inset space \quad{}
\end_inset

 /movies/<id>/
\end_layout

\begin_layout FragileFrame
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout FragileFrame
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{lstlisting}[language=json,numbers=none]
\end_layout

\begin_layout Plain Layout

{"movie": 
\end_layout

\begin_layout Plain Layout

   {"name": "Kill Bill",
\end_layout

\begin_layout Plain Layout

     
\begin_inset Quotes fld
\end_inset

id
\begin_inset Quotes frd
\end_inset

: 184766018,
\end_layout

\begin_layout Plain Layout

     
\begin_inset Quotes fld
\end_inset

director
\begin_inset Quotes frd
\end_inset

: 
\begin_inset Quotes fld
\end_inset

Quentin Tarantino
\begin_inset Quotes frd
\end_inset


\end_layout

\begin_layout Plain Layout

     "cast": [{
\begin_inset Quotes fld
\end_inset

name
\begin_inset Quotes frd
\end_inset

: 
\begin_inset Quotes fld
\end_inset

Uma Thurman
\begin_inset Quotes frd
\end_inset

,
\end_layout

\begin_layout Plain Layout

               
\begin_inset Quotes fld
\end_inset

age
\begin_inset Quotes frd
\end_inset

: 49,
\end_layout

\begin_layout Plain Layout

               
\begin_inset Quotes fld
\end_inset

awards
\begin_inset Quotes frd
\end_inset

: [...]}
\end_layout

\begin_layout Plain Layout

             ]
\end_layout

\begin_layout Plain Layout

   }
\end_layout

\begin_layout Plain Layout

} 
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Separator plain
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
REST: Representational State Transfer
\end_layout

\end_inset


\end_layout

\begin_layout Frame
Características:
\end_layout

\begin_deeper
\begin_layout Itemize
Arquitectura cliente-servidor.
\end_layout

\begin_layout Itemize
El identificador de cada recurso es la URI.
\end_layout

\begin_layout Itemize
Stateless: la petición contiene toda la información necesaria para ejecutarla.
\end_layout

\begin_layout Itemize
HATEOAS: en la respuesta se retornan links a otros recursos asociados.
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator plain
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
REST: Representational State Transfer
\end_layout

\end_inset


\end_layout

\begin_layout Frame
Ventajas de implementar un API con REST:
\end_layout

\begin_deeper
\begin_layout Itemize
Desacople entre cliente y servidor, lo que permite que evolucionen independiente
mente.
\end_layout

\begin_layout Itemize
Escalabilidad: en sistemas distribuidos, cualquier nodo puede responder
 a una petición ya que no mantienen información de sesión durante la interacción.
\end_layout

\begin_layout Itemize
Emplea estándares como HTTP, JSON y XML.
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator plain
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
REST: Representational State Transfer
\end_layout

\end_inset


\end_layout

\begin_layout Frame
Desventajas:
\end_layout

\begin_deeper
\begin_layout Itemize
Overfetching.
\end_layout

\begin_layout Itemize
Underfetching.
\end_layout

\begin_layout Itemize
Múltiples queries para obtener los datos.
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator plain
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Introducción a GraphQL
\end_layout

\end_inset


\end_layout

\begin_layout Frame
GraphQL es un lenguaje de consulta y manipulación pensado para comunicar
 clientes y servidores.
 
\end_layout

\begin_deeper
\begin_layout Itemize
Desarrollado inicialmente por Facebook.
\end_layout

\begin_layout Itemize
Provee un enfoque y herramientas para desarrollar APIs web.
\end_layout

\begin_layout Itemize
Permite a los clientes definir la estructura de datos que los mismos requieran.
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator plain
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Introducción a GraphQL
\end_layout

\end_inset


\end_layout

\begin_layout Frame
GraphQL permite la consulta de datos mediante un enfoque 
\emph on
declarativo
\emph default
.
 Un cliente específica exactamente qué datos desea obtener del servidor.
 
\end_layout

\begin_layout Frame
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Frame
A diferencia de REST, donde se exponen múltiples endpoints que retornan
 una estructura de datos fija, GraphQL define un único endpoint.
 En dicho endpoint responde con la información solicitada por el cliente.
\end_layout

\begin_layout Standard
\begin_inset Separator plain
\end_inset


\end_layout

\begin_layout FragileFrame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Schema Definition Language (SDL)
\end_layout

\end_inset


\end_layout

\begin_layout FragileFrame
GraphQL posee su propio sistema de tipos que permite definir el esquema
 de un API.
\end_layout

\begin_layout FragileFrame
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{lstlisting}[language=json, numbers=none]
\end_layout

\begin_layout Plain Layout

type Employee {
\end_layout

\begin_layout Plain Layout

   name: String
\end_layout

\begin_layout Plain Layout

   age: Int
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\end_layout

\end_inset


\end_layout

\begin_layout FragileFrame
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout FragileFrame
Se pueden expresar relaciones entre los tipos definidos.
\end_layout

\begin_layout FragileFrame
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{lstlisting}[language=json, numbers=none]
\end_layout

\begin_layout Plain Layout

type Department {
\end_layout

\begin_layout Plain Layout

   name: String
\end_layout

\begin_layout Plain Layout

   employees: [Employee]
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Separator plain
\end_inset


\end_layout

\begin_layout FragileFrame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Queries
\end_layout

\end_inset


\end_layout

\begin_layout FragileFrame
Ejemplo de una consulta básica:
\end_layout

\begin_layout FragileFrame
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{lstlisting}[language=json, numbers=none]
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

  allEmployees {
\end_layout

\begin_layout Plain Layout

     name
\end_layout

\begin_layout Plain Layout

  }
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\end_layout

\end_inset


\end_layout

\begin_layout FragileFrame
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout FragileFrame
Resultado:
\end_layout

\begin_layout FragileFrame
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{lstlisting}[language=json, numbers=none]
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

  "allEmployees": 
\end_layout

\begin_layout Plain Layout

      [{"name": "Cecilia"},
\end_layout

\begin_layout Plain Layout

       {"name": "Lucas"},
\end_layout

\begin_layout Plain Layout

       {"name": "Javier"}]
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Separator plain
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Queries
\end_layout

\end_inset


\end_layout

\begin_layout Frame
Y la edad de cada empleado? Con GraphQL, el cliente puede consultar solamente
 los fields que desee obtener!
\end_layout

\begin_layout Frame
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Frame
En GraphQL, mediante una Query, los clientes puede obtener datos del servidor
 de una forma más flexible que con REST.
\end_layout

\begin_layout Standard
\begin_inset Separator plain
\end_inset


\end_layout

\begin_layout FragileFrame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Argumentos
\end_layout

\end_inset


\end_layout

\begin_layout FragileFrame
Volvamos al ejemplo de las películas.
\end_layout

\begin_layout FragileFrame
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{lstlisting}[language=json, numbers=none]
\end_layout

\begin_layout Plain Layout

query { 	
\end_layout

\begin_layout Plain Layout

    movie(name:"Titanic"){     
\end_layout

\begin_layout Plain Layout

       name     
\end_layout

\begin_layout Plain Layout

       releaseDate   
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\end_layout

\end_inset


\end_layout

\begin_layout FragileFrame
Resultado:
\end_layout

\begin_layout FragileFrame
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{lstlisting}[language=json, numbers=none]
\end_layout

\begin_layout Plain Layout

{    
\end_layout

\begin_layout Plain Layout

   "movie": {
\end_layout

\begin_layout Plain Layout

       "name": "Titanic",       
\end_layout

\begin_layout Plain Layout

       "releaseDate": "05-02-1998"
\end_layout

\begin_layout Plain Layout

   }
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Separator plain
\end_inset


\end_layout

\begin_layout FragileFrame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Argumentos
\end_layout

\end_inset


\end_layout

\begin_layout FragileFrame
Mejor aún, cada field puede tener sus propios argumentos.
\end_layout

\begin_layout FragileFrame
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{lstlisting}[language=json, numbers=none]
\end_layout

\begin_layout Plain Layout

query { 	
\end_layout

\begin_layout Plain Layout

    movie(name:"Titanic"){     
\end_layout

\begin_layout Plain Layout

       name     
\end_layout

\begin_layout Plain Layout

       releaseDate(format: ONLY_YEAR)
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\end_layout

\end_inset


\end_layout

\begin_layout FragileFrame
Resultado:
\end_layout

\begin_layout FragileFrame
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{lstlisting}[language=json, numbers=none]
\end_layout

\begin_layout Plain Layout

{    
\end_layout

\begin_layout Plain Layout

   "movie": {
\end_layout

\begin_layout Plain Layout

       "name": "Titanic",       
\end_layout

\begin_layout Plain Layout

       "releaseDate": "1998"
\end_layout

\begin_layout Plain Layout

   }
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Separator plain
\end_inset


\end_layout

\begin_layout FragileFrame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Alias
\end_layout

\end_inset


\end_layout

\begin_layout FragileFrame
Cuando consultamos un mismo field, usamos un alias para renombrar el resultado.
\end_layout

\begin_layout FragileFrame
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{lstlisting}[language=json, numbers=none]
\end_layout

\begin_layout Plain Layout

query {
\end_layout

\begin_layout Plain Layout

  titanic: movie(name:"Titanic"){     
\end_layout

\begin_layout Plain Layout

          name
\end_layout

\begin_layout Plain Layout

          releaseDate
\end_layout

\begin_layout Plain Layout

  }
\end_layout

\begin_layout Plain Layout

  wws: movie(name:"The Wolf of Wall Street"){
\end_layout

\begin_layout Plain Layout

          name
\end_layout

\begin_layout Plain Layout

          releaseDate
\end_layout

\begin_layout Plain Layout

  }
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Separator plain
\end_inset


\end_layout

\begin_layout FragileFrame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Alias
\end_layout

\end_inset


\end_layout

\begin_layout FragileFrame
Resultado:
\end_layout

\begin_layout FragileFrame
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{lstlisting}[language=json, numbers=none]
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

   "titanic": {
\end_layout

\begin_layout Plain Layout

       "name": "Titanic",
\end_layout

\begin_layout Plain Layout

       "releaseDate": "05-02-1998"
\end_layout

\begin_layout Plain Layout

   },
\end_layout

\begin_layout Plain Layout

   "wws": {
\end_layout

\begin_layout Plain Layout

       "name": "The Wolf of Wall Street",
\end_layout

\begin_layout Plain Layout

       "releaseDate": "25-12-2013"
\end_layout

\begin_layout Plain Layout

   }
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Separator plain
\end_inset


\end_layout

\begin_layout FragileFrame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Fragments
\end_layout

\end_inset


\end_layout

\begin_layout FragileFrame
Podemos usar 
\emph on
fragments
\emph default
 para evitar repetir campos.
\end_layout

\begin_layout FragileFrame
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{lstlisting}[language=json, numbers=none]
\end_layout

\begin_layout Plain Layout

query {
\end_layout

\begin_layout Plain Layout

  titanic: movie(name:"Titanic"){     
\end_layout

\begin_layout Plain Layout

       ...movieFields
\end_layout

\begin_layout Plain Layout

  }
\end_layout

\begin_layout Plain Layout

  wws: movie(name:"The Wolf of Wall Street"){
\end_layout

\begin_layout Plain Layout

       ...movieFields
\end_layout

\begin_layout Plain Layout

  }
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

fragment movieFields on Movie {   
\end_layout

\begin_layout Plain Layout

    name
\end_layout

\begin_layout Plain Layout

    releaseDate
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Separator plain
\end_inset


\end_layout

\begin_layout FragileFrame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Variables
\end_layout

\end_inset


\end_layout

\begin_layout FragileFrame
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{lstlisting}[language=json, numbers=none]
\end_layout

\begin_layout Plain Layout

query ($name: String) {
\end_layout

\begin_layout Plain Layout

  movie(name: $name) {     
\end_layout

\begin_layout Plain Layout

    name
\end_layout

\begin_layout Plain Layout

    releaseDate
\end_layout

\begin_layout Plain Layout

  }
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Separator plain
\end_inset


\end_layout

\begin_layout FragileFrame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Sistema de Tipos
\end_layout

\end_inset


\end_layout

\begin_layout FragileFrame
Cómo se relacionan las 
\emph on
queries 
\emph default
mostradas recientemente con el sistema de tipos y los esquemas?
\end_layout

\begin_layout FragileFrame
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{lstlisting}[language=json, numbers=none]
\end_layout

\begin_layout Plain Layout

type Query {
\end_layout

\begin_layout Plain Layout

    movies: [Movie]
\end_layout

\begin_layout Plain Layout

    movie(name: String!): Movie
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

type Movie {
\end_layout

\begin_layout Plain Layout

    name: String!        # non-nullable
\end_layout

\begin_layout Plain Layout

    releaseDate: String
\end_layout

\begin_layout Plain Layout

    director: Director
\end_layout

\begin_layout Plain Layout

    actors: [Actor]
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Separator plain
\end_inset


\end_layout

\begin_layout FragileFrame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Sistema de Tipos: Listas
\end_layout

\end_inset


\end_layout

\begin_layout FragileFrame
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{lstlisting}[language=json, numbers=none]
\end_layout

\begin_layout Plain Layout

type Director {
\end_layout

\begin_layout Plain Layout

    fullName: String!
\end_layout

\begin_layout Plain Layout

    age: Int
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

type Actor {
\end_layout

\begin_layout Plain Layout

    fullName: String!
\end_layout

\begin_layout Plain Layout

    age: Int
\end_layout

\begin_layout Plain Layout

    appearsIn: [Movie]   
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Separator plain
\end_inset


\end_layout

\begin_layout FragileFrame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Queries: consultando objetos
\end_layout

\end_inset


\end_layout

\begin_layout FragileFrame
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{lstlisting}[language=json, numbers=none]
\end_layout

\begin_layout Plain Layout

query { 	
\end_layout

\begin_layout Plain Layout

    movie(name:"Titanic"){     
\end_layout

\begin_layout Plain Layout

       name     
\end_layout

\begin_layout Plain Layout

       director {
\end_layout

\begin_layout Plain Layout

           fullName
\end_layout

\begin_layout Plain Layout

       }
\end_layout

\begin_layout Plain Layout

} }
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\end_layout

\end_inset


\end_layout

\begin_layout FragileFrame
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{lstlisting}[language=json, numbers=none]
\end_layout

\begin_layout Plain Layout

{    
\end_layout

\begin_layout Plain Layout

   "movie": {
\end_layout

\begin_layout Plain Layout

       "name": "Titanic",       
\end_layout

\begin_layout Plain Layout

       "director": {
\end_layout

\begin_layout Plain Layout

            "fullName": "James Cameron"
\end_layout

\begin_layout Plain Layout

       }
\end_layout

\begin_layout Plain Layout

   }
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Separator plain
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Sistema de Tipos: Scalars
\end_layout

\end_inset


\end_layout

\begin_layout Frame
GraphQL viene con un conjunto de tipos por defecto:
\end_layout

\begin_layout Frame
\begin_inset VSpace smallskip
\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
String
\end_layout

\begin_layout Itemize
Int
\end_layout

\begin_layout Itemize
Float
\end_layout

\begin_layout Itemize
Boolean
\end_layout

\begin_layout Itemize
ID
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator plain
\end_inset


\end_layout

\begin_layout FragileFrame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Sistema de Tipos: Enums
\end_layout

\end_inset


\end_layout

\begin_layout FragileFrame
GraphQL permite definir tipos enumerados.
\end_layout

\begin_layout FragileFrame
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{lstlisting}[language=json, numbers=none]
\end_layout

\begin_layout Plain Layout

enum Day {
\end_layout

\begin_layout Plain Layout

   MONDAY
\end_layout

\begin_layout Plain Layout

   TUESDAY
\end_layout

\begin_layout Plain Layout

   WEDNESDAY
\end_layout

\begin_layout Plain Layout

   THURSDAY
\end_layout

\begin_layout Plain Layout

   FRIDAY
\end_layout

\begin_layout Plain Layout

   SATURDAY
\end_layout

\begin_layout Plain Layout

   SUNDAY
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Separator plain
\end_inset


\end_layout

\begin_layout FragileFrame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Sistema de Tipos: Interfaces
\end_layout

\end_inset


\end_layout

\begin_layout FragileFrame
GraphQL permite definir 
\emph on
Interfaces
\emph default
.
\end_layout

\begin_layout FragileFrame
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{lstlisting}[language=json, numbers=none]
\end_layout

\begin_layout Plain Layout

interface Person {
\end_layout

\begin_layout Plain Layout

    name: String!
\end_layout

\begin_layout Plain Layout

    age: Int
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

type Director implements Person {
\end_layout

\begin_layout Plain Layout

    name: String!
\end_layout

\begin_layout Plain Layout

    age: Int
\end_layout

\begin_layout Plain Layout

    isProducer: Boolean
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

type Actor implements Person {
\end_layout

\begin_layout Plain Layout

    name: String!
\end_layout

\begin_layout Plain Layout

    age: Int
\end_layout

\begin_layout Plain Layout

    appearsIn: [Movie]
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Separator plain
\end_inset


\end_layout

\begin_layout FragileFrame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Sistema de Tipos: Interfaces
\end_layout

\end_inset


\end_layout

\begin_layout FragileFrame
Podemos tener una query que consulte por una lista de personas:
\end_layout

\begin_layout FragileFrame
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{lstlisting}[language=json, numbers=none]
\end_layout

\begin_layout Plain Layout

type Query {
\end_layout

\begin_layout Plain Layout

    allDirectorsAndActors: [Person]
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\end_layout

\end_inset


\end_layout

\begin_layout FragileFrame
Y consultar por información específica de un director:
\end_layout

\begin_layout FragileFrame
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{lstlisting}[language=json, numbers=none]
\end_layout

\begin_layout Plain Layout

query {
\end_layout

\begin_layout Plain Layout

    allDirectorsAndActors {
\end_layout

\begin_layout Plain Layout

       name
\end_layout

\begin_layout Plain Layout

       ...
 on Director {
\end_layout

\begin_layout Plain Layout

           isProducer
\end_layout

\begin_layout Plain Layout

       }
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Separator plain
\end_inset


\end_layout

\begin_layout FragileFrame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Resolvers
\end_layout

\end_inset


\end_layout

\begin_layout FragileFrame
Pero cómo se implementa en el servidor?
\end_layout

\begin_layout FragileFrame
Si repasamos los esquemas que hemos visto, cada field tiene asociado un
 tipo.
 Un servidor GraphQL tiene un resolver por cada field.
 Si consideramos a una query como una collección de fields, la tarea del
 servidor para responder a la petición es invocar cada uno de los resolvers
 correspondientes a los fields de dicha query.
\end_layout

\begin_layout FragileFrame
\begin_inset VSpace smallskip
\end_inset


\end_layout

\begin_layout FragileFrame
Por ejemplo, en Python:
\end_layout

\begin_layout FragileFrame
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout FragileFrame
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{lstlisting}[language=Python, numbers=none]
\end_layout

\begin_layout Plain Layout

class Query(graphene.ObjectType):     
\end_layout

\begin_layout Plain Layout

    movies = graphene.List(MovieType)
\end_layout

\begin_layout Plain Layout

    def resolve_movies(self, info, **kwargs):         
\end_layout

\begin_layout Plain Layout

        return get_movies_from_db()
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Separator plain
\end_inset


\end_layout

\begin_layout FragileFrame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Mutations
\end_layout

\end_inset


\end_layout

\begin_layout FragileFrame
Hasta acá hemos visto cómo consultar información.
 Podemos además modificar el estado del servidor con 
\emph on
mutations
\emph default
.
\end_layout

\begin_layout FragileFrame
La sintaxis es similar:
\end_layout

\begin_layout FragileFrame
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{lstlisting}[language=json, numbers=none]
\end_layout

\begin_layout Plain Layout

mutation {
\end_layout

\begin_layout Plain Layout

    addMovie(name: 
\begin_inset Quotes fld
\end_inset

Pulp Fiction
\begin_inset Quotes frd
\end_inset

, director: {fullName: 
\begin_inset Quotes fld
\end_inset

Quentin Tarantino
\begin_inset Quotes frd
\end_inset

}) {
\end_layout

\begin_layout Plain Layout

         name
\end_layout

\begin_layout Plain Layout

         ok
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\end_layout

\end_inset


\end_layout

\begin_layout FragileFrame
Podemos especificar qué campos retornar.
 Al igual que en una query, addMovie tiene un tipo asociado.
 Este tipo puede ser un tipo definido específicamente para esta mutation
 y los fields que retorna no tienen por qué guardar relación con los campos
 de entrada.
\end_layout

\begin_layout Standard
\begin_inset Separator plain
\end_inset


\end_layout

\begin_layout FragileFrame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Mutations
\end_layout

\end_inset


\end_layout

\begin_layout FragileFrame
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{lstlisting}[language=json, numbers=none]
\end_layout

\begin_layout Plain Layout

type Mutation {
\end_layout

\begin_layout Plain Layout

  addMovie(name: String, director: DirectorInput): AddMovieOutput
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

input DirectorInput {
\end_layout

\begin_layout Plain Layout

  fullName: String
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

type AddMovieOutput {
\end_layout

\begin_layout Plain Layout

  name: String
\end_layout

\begin_layout Plain Layout

  ok: Boolean
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Separator plain
\end_inset


\end_layout

\begin_layout FragileFrame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Introspection
\end_layout

\end_inset


\end_layout

\begin_layout FragileFrame
GraphQL permite a los clientes hacer consultas para conocer el esquema.
\end_layout

\begin_layout FragileFrame
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{lstlisting}[language=json, numbers=none]
\end_layout

\begin_layout Plain Layout

query {
\end_layout

\begin_layout Plain Layout

    __schema{
\end_layout

\begin_layout Plain Layout

       types {
\end_layout

\begin_layout Plain Layout

          name
\end_layout

\begin_layout Plain Layout

          kind
\end_layout

\begin_layout Plain Layout

          fields {
\end_layout

\begin_layout Plain Layout

            name
\end_layout

\begin_layout Plain Layout

          }
\end_layout

\begin_layout Plain Layout

       }   
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Separator plain
\end_inset


\end_layout

\begin_layout FragileFrame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Introspection
\end_layout

\end_inset


\end_layout

\begin_layout FragileFrame
GraphQL permite a los clientes hacer consultas para conocer el esquema.
\end_layout

\begin_layout FragileFrame
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{lstlisting}[language=json, numbers=none]
\end_layout

\begin_layout Plain Layout

{  "__schema": {
\end_layout

\begin_layout Plain Layout

        "types": [
\end_layout

\begin_layout Plain Layout

            {
\end_layout

\begin_layout Plain Layout

               "name": "Movie",
\end_layout

\begin_layout Plain Layout

               "kind": "OBJECT",
\end_layout

\begin_layout Plain Layout

               "fields": [
\end_layout

\begin_layout Plain Layout

                 {"name": "name"},
\end_layout

\begin_layout Plain Layout

                 {"name": "director"},
\end_layout

\begin_layout Plain Layout

                 {"name": "releaseDate"},
\end_layout

\begin_layout Plain Layout

                 ...]
\end_layout

\begin_layout Plain Layout

            },
\end_layout

\begin_layout Plain Layout

        ...]
\end_layout

\begin_layout Plain Layout

   }
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Separator plain
\end_inset


\end_layout

\begin_layout FragileFrame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Introspection
\end_layout

\end_inset


\end_layout

\begin_layout FragileFrame
Podemos consultar información de un tipo específico:
\end_layout

\begin_layout FragileFrame
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{lstlisting}[language=json, numbers=none]
\end_layout

\begin_layout Plain Layout

query {
\end_layout

\begin_layout Plain Layout

    __type(name: 
\begin_inset Quotes fld
\end_inset

String
\begin_inset Quotes frd
\end_inset

){
\end_layout

\begin_layout Plain Layout

       name
\end_layout

\begin_layout Plain Layout

       kind  
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\end_layout

\end_inset


\end_layout

\begin_layout FragileFrame
Resultado:
\end_layout

\begin_layout FragileFrame
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{lstlisting}[language=json, numbers=none]
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

    "__type": {
\end_layout

\begin_layout Plain Layout

         "name": "String",
\end_layout

\begin_layout Plain Layout

         "kind": "SCALAR"     
\end_layout

\begin_layout Plain Layout

    } 
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Separator plain
\end_inset


\end_layout

\begin_layout FragileFrame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Subscriptions
\end_layout

\end_inset


\end_layout

\begin_layout FragileFrame
Mediante una 
\emph on
subscription
\emph default
 podemos suscribirnos a un evento, mantener una conexión abierta con el
 servidor y recibir notificaciones cuando dicho evento ocurra:
\end_layout

\begin_layout FragileFrame
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{lstlisting}[language=json, numbers=none]
\end_layout

\begin_layout Plain Layout

type Subscription {
\end_layout

\begin_layout Plain Layout

    newMovie: Movie
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\end_layout

\end_inset


\end_layout

\begin_layout FragileFrame
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{lstlisting}[language=json, numbers=none]
\end_layout

\begin_layout Plain Layout

subscription {
\end_layout

\begin_layout Plain Layout

    newMovie {
\end_layout

\begin_layout Plain Layout

        name
\end_layout

\begin_layout Plain Layout

        releaseDate
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Separator plain
\end_inset


\end_layout

\begin_layout FragileFrame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Ejercicios
\end_layout

\end_inset


\end_layout

\begin_layout FragileFrame
Algunos ejercicios...
\end_layout

\begin_layout FragileFrame

\end_layout

\begin_layout Standard
\begin_inset Separator plain
\end_inset


\end_layout

\begin_layout FragileFrame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Implementando el server en Python
\end_layout

\end_inset


\end_layout

\begin_layout FragileFrame
En Python, utilizamos la librería graphene para definir un esquema e implementar
 el servidor.
\end_layout

\begin_layout FragileFrame
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{lstlisting}[language=Python]
\end_layout

\begin_layout Plain Layout

from graphene import ObjectType, String, Field,
\end_layout

\begin_layout Plain Layout

    List, Int, Schema, Mutation
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

class Movie(ObjectType):
\end_layout

\begin_layout Plain Layout

   name = String(required=True)
\end_layout

\begin_layout Plain Layout

   duration_in_minutes = Int()
\end_layout

\begin_layout Plain Layout

   director = Field(Director)
\end_layout

\begin_layout Plain Layout

   actors = List(Actor)
\end_layout

\begin_layout Plain Layout

   release_date = String()
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Separator plain
\end_inset


\end_layout

\begin_layout FragileFrame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Implementando el server en Python
\end_layout

\end_inset


\end_layout

\begin_layout FragileFrame
Veamos la implementación de algunos 
\emph on
resolvers:
\end_layout

\begin_layout FragileFrame
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{lstlisting}[language=Python]
\end_layout

\begin_layout Plain Layout

class Query(ObjectType):
\end_layout

\begin_layout Plain Layout

  movies = List(Movie)
\end_layout

\begin_layout Plain Layout

  movie = Field(Movie, name=String(required=True))
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

  def resolve_movies(self, info):
\end_layout

\begin_layout Plain Layout

      return get_movies_from_db()
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

  def resolve_movie(self, info, name):
\end_layout

\begin_layout Plain Layout

      return get_movie(name) # instance of Movie
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Separator plain
\end_inset


\end_layout

\begin_layout FragileFrame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Implementando el server en Python
\end_layout

\end_inset


\end_layout

\begin_layout FragileFrame
Veamos la implementación de una 
\emph on
mutation
\emph default
:
\end_layout

\begin_layout FragileFrame
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{lstlisting}[language=Python]
\end_layout

\begin_layout Plain Layout

class Mutation(ObjectType):
\end_layout

\begin_layout Plain Layout

   add_movie = AddMovie.Field()
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

class AddMovie(Mutation):
\end_layout

\begin_layout Plain Layout

   name = String()
\end_layout

\begin_layout Plain Layout

   ok = Boolean()
\end_layout

\begin_layout Plain Layout

   class Arguments:
\end_layout

\begin_layout Plain Layout

        movie = MovieInput()
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

   def mutate(self, info, movie):
\end_layout

\begin_layout Plain Layout

        insert_to_db(movie)
\end_layout

\begin_layout Plain Layout

        return AddMovie(name=movie.name, ok=true)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Separator plain
\end_inset


\end_layout

\begin_layout FragileFrame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Implementando el server en Python
\end_layout

\end_inset


\end_layout

\begin_layout FragileFrame
Podemos retornar errores de la siguiente forma:
\end_layout

\begin_layout FragileFrame
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{lstlisting}[language=Python]
\end_layout

\begin_layout Plain Layout

from graphql import GraphQLError
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

def mutate(self, info, movie):
\end_layout

\begin_layout Plain Layout

    try:
\end_layout

\begin_layout Plain Layout

       insert_to_db(movie)
\end_layout

\begin_layout Plain Layout

       return AddMovie(name=movie.name, ok=true)
\end_layout

\begin_layout Plain Layout

    except Exception as e:
\end_layout

\begin_layout Plain Layout

       raise GraphQLError(
\begin_inset Quotes fld
\end_inset

Unable to insert movie
\begin_inset Quotes frd
\end_inset

)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Separator plain
\end_inset


\end_layout

\begin_layout FragileFrame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Implementando el server en Python
\end_layout

\end_inset


\end_layout

\begin_layout FragileFrame
En la respuesta veremos algo similar a este resultado:
\end_layout

\begin_layout FragileFrame
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{lstlisting}[language=Python]
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

  "errors": [
\end_layout

\begin_layout Plain Layout

     {
\end_layout

\begin_layout Plain Layout

       "message": "Unable to insert movie",
\end_layout

\begin_layout Plain Layout

       "locations": [{"line": 2,
\end_layout

\begin_layout Plain Layout

                      "column": 3}],
\end_layout

\begin_layout Plain Layout

       "path": ["addMovie"]
\end_layout

\begin_layout Plain Layout

     }
\end_layout

\begin_layout Plain Layout

   ]
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Separator plain
\end_inset


\end_layout

\begin_layout FragileFrame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Implementando el server en Python
\end_layout

\end_inset


\end_layout

\begin_layout FragileFrame
Podemos acceder a información contextual y metadata en un 
\emph on
resolver
\emph default
 mediante el argumento 
\emph on
info
\emph default
.
 En este ejemplo consultamos el método HTTP empleado y los headers HTTP
\emph on
:
\end_layout

\begin_layout FragileFrame
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{lstlisting}[language=Python]
\end_layout

\begin_layout Plain Layout

class Query(ObjectType):
\end_layout

\begin_layout Plain Layout

  movies = List(Movie)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

  def resolve_movies(self, info):
\end_layout

\begin_layout Plain Layout

    method = info.context["request"].method
\end_layout

\begin_layout Plain Layout

    print(method) # print 
\begin_inset Quotes fld
\end_inset

POST
\begin_inset Quotes frd
\end_inset


\end_layout

\begin_layout Plain Layout

    headers = info.context["request"].headers
\end_layout

\begin_layout Plain Layout

    print(headers['host']) # print the hostname
\end_layout

\begin_layout Plain Layout

    return get_movies_from_db()
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Separator plain
\end_inset


\end_layout

\begin_layout FragileFrame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
GraphiQL
\end_layout

\end_inset


\end_layout

\begin_layout FragileFrame
GraphiQL es una herramienta de interfaz gráfica que permite conectarnos
 a un servidor durante la etapa de desarrollo y ejecutar queries y mutations.
 Podemos también consultar el esquema de una forma interactiva.
\end_layout

\end_body
\end_document
